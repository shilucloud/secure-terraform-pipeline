name: Terraform CI/CD

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  terraform_pipeline:
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack-pro:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sts
          DEBUG: 1 
          LOCALSTACK_AUTH_TOKEN: ${{ secrets.LOCALSTACK_AUTH_TOKEN }}
        
    env:
      IS_CI: true
      TF_IN_AUTOMATION: true
      TF_CLI_ARGS: "-no-color"
      NIX_PATH: "nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixos-25.05.tar.gz"
      LOCALSTACK_AUTH_TOKEN: ${{ secrets.LOCALSTACK_AUTH_TOKEN }}
      TF_VAR_localstack_enabled: true 
      AWS_ENDPOINT_URL: "http://localhost:4566"
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
      TF_VAR_aws_region: ${{ secrets.TF_VAR_AWS_REGION }}
      TF_VAR_enable_versioning: ${{ secrets.TF_VAR_ENABLE_VERSIONING }}
      TF_VAR_env: ${{ secrets.TF_VAR_ENV }}
      TF_VAR_aws_tags: ${{ secrets.TF_VAR_TAGS }}

    steps:
      - uses: actions/checkout@v4

      # Cache Terraform & Go modules
      - name: Cache Terraform & Go
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
            ~/go/pkg/mod
          key: terraform-go-${{ runner.os }}-${{ hashFiles('**/*.tf') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            terraform-go-${{ runner.os }}-

      # Setup Nix once
      - name: Setup Nix
        uses: cachix/install-nix-action@v22

      # configuring Localstack Backend
      - name: Configure LocalStack Backend
        run: cp infrastructure/backends/localstack-backend.tf infrastructure/terraform.tf

      # Terraform Fmt 
      - name: Terraform Lint 
        run: nix-shell shell.nix  --run "cd infrastructure && tflocal fmt -check -recursive"
      
      # Terraform Validate
      - name: Terraform Validate
        run: nix-shell shell.nix  --run "tflocal validate"

      # Start LocalStack (single instance for all steps)
     # - name: Start LocalStack
     #   run: docker compose -f localstack/localstack-compose.yml up -d

      # Wait for LocalStack readiness
     # - name: Wait for LocalStack
     #   run: |
     #     until curl -s http://localhost:4566/health | grep '"s3": "running"'; do
     #       echo "Waiting for LocalStack..."
      #      sleep 2
      #    done

      - name: Terraform Init
        run: nix-shell shell.nix  --run "cd infrastructure && tflocal init"

      - name: Terraform Plan
        run: nix-shell shell.nix --run "cd infrastructure && tflocal plan -out=tfplan | tee terraform-plan.txt"
      
      - name: Terraform Plan Json 
        run: nix-shell shell.nix  --run "cd infrastructure && tflocal show -json tfplan >> tfplan.json"

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            infrastructure/tfplan
            infrastructure/terraform-plan.txt
            infrastructure/tfplan.json 

      - name: Testing Stage 
        run: |
          cat infrastructure/terraform.tf
          cat infrastructure/variables.tf 
          cat infrastructure/provider.tf 
          cat infrastructure/main.tf 
          cat infrastructure/outputs.tf 

      # Security scans
      - name: Run Checkov Scans
        run: nix-shell shell.nix --run "checkov -d ./infrastructure -o json > checkov-report.json"

      - name: Run Conftest 
        run: nix-shell shell.nix --run "conftest test infrastructure/tfplan.json --output=json > conftest-report.json"
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            checkov-report.json
            conftest-report.json

      # Terratest
      - name: Run Terratest
        run: nix-shell shell.nix --run "cd test && go test ./ -v -timeout 30m | tee terratest-results.txt"

      - name: Upload Terratest Results
        uses: actions/upload-artifact@v4
        with:
          name: terratest-results
          path: test/terratest-results.txt

      # PR comment
      - name: PR Comment with Summary
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-summary
          message: |
            ## ✅ Terraform Validation Summary

            - **Lint & Validate:** Passed  
            - **Checkov Security Scan:** See artifact (`checkov-report.json`)  
            - **OPA/Conftest Policies:** See artifact (`conftest-report.json`)  
            - **Terratest Results:** See artifact (`terratest-results.txt`)  
            - **Terraform Plan:** Uploaded (`terraform-plan.txt`)  

            ⚠️ Please review reports before merging.
